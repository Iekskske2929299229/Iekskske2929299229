 import os
import asyncio
import time
import aiosqlite
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from telethon.sync import TelegramClient
from telethon.tl.functions.messages import ReportRequest
from telethon.tl.types import InputPeerChannel, InputReportReasonSpam, InputReportReasonViolence, InputReportReasonPornography, InputReportReasonChildAbuse, InputReportReasonIllegalDrugs, InputReportReasonPersonalDetails, InputReportReasonOther
from datetime import datetime, timedelta
from telethon.errors import SessionPasswordNeededError, AuthKeyUnregisteredError, AuthKeyDuplicatedError
import random

API_ID = 22145591
API_HASH = 'a158695b95d3c634ee71b0c54f93bb5c'
BOT_TOKEN = '7981123509:AAHJpebJb0FIc5K3ZUAD7xA0emjBfzKF7D0'
ADMIN_ID = 263834296
DB_PATH = 'subscriptions.db'
LOG_CHAT_ID = -1002344459923

reasons = {
    'spam': InputReportReasonSpam(),
    'violence': InputReportReasonViolence(),
    'pornography': InputReportReasonPornography(),
    'child_abuse': InputReportReasonChildAbuse(),
    'illegal_drugs': InputReportReasonIllegalDrugs(),
    'personal_details': InputReportReasonPersonalDetails(),
    'other': InputReportReasonOther()
}

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

reporting_time = {}
reporting = {}

def log_to_console_and_file(message: str):
    print(message)
    with open('attack_log.txt', 'a', encoding='utf-8') as f:
        f.write(f"{datetime.utcnow()} - {message}\n")

async def check_subscription(user_id: int) -> bool:
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute('SELECT expiration_date FROM subscriptions WHERE user_id = ?', (user_id,))
        row = await cursor.fetchone()
        if row:
            expiration_date = datetime.fromisoformat(row[0])
            return expiration_date > datetime.utcnow()
    return False

async def add_subscription(user_id: int, days: int):
    expiration_date = datetime.utcnow() + timedelta(days=days)
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute('SELECT * FROM subscriptions WHERE user_id = ?', (user_id,))
        existing = await cursor.fetchone()
        if existing:
            await db.execute('UPDATE subscriptions SET expiration_date = ? WHERE user_id = ?',
                             (expiration_date.isoformat(), user_id))
        else:
            await db.execute('INSERT INTO subscriptions (user_id, expiration_date) VALUES (?, ?)',
                             (user_id, expiration_date.isoformat()))
        await db.commit()

async def init_db():
    if not os.path.exists(DB_PATH):
        log_to_console_and_file("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–æ–∑–¥–∞—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")

    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute('''CREATE TABLE IF NOT EXISTS subscriptions (
                                user_id INTEGER PRIMARY KEY,
                                expiration_date TEXT)''')
        await db.execute('''CREATE TABLE IF NOT EXISTS users (
                                user_id INTEGER PRIMARY KEY,
                                last_report_time TEXT)''')
        await db.commit()

async def get_main_keyboard() -> ReplyKeyboardMarkup:
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("üö® –†–µ–ø–æ—Ä—Ç"))
    keyboard.add(KeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å"))
    keyboard.add(KeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"))
    return keyboard

async def report_message(client, peer, msg_id, reason, desc):
    try:
        start_time = time.time()
        await client(ReportRequest(peer, id=[msg_id], reason=reason, message=desc))
        end_time = time.time()
        log_to_console_and_file(f"–ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è ID {msg_id}. –í—Ä–µ–º—è: {end_time - start_time:.2f} —Å–µ–∫.")
    except Exception as e:
        log_to_console_and_file(f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É: {e}')

async def process_message_link(client, message_link, reason, desc):
    try:
        message_link_parts = message_link.split('/')
        channel_username = message_link_parts[3]
        message_id = int(message_link_parts[-1])

        channel = await client.get_entity(channel_username)
        message = await client.get_messages(channel, ids=message_id)

        report_message_text = f"–ù–∞—á–∞–ª –∞—Ç–∞–∫—É\n–¢–∞—Ä–≥–µ—Ç - {message_link}"

        peer = InputPeerChannel(channel.id, channel.access_hash)
        await report_message(client, peer, message_id, reason, report_message_text)

    except Exception as e:
        log_to_console_and_file(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏: {e}")

def load_report_descriptions(reason: str) -> list:
    try:
        with open('text.txt', 'r', encoding='utf-8') as file:
            lines = file.readlines()
            descriptions = [line.strip().split(' - ', 1)[1] for line in lines if line.lower().startswith(reason.lower())]
            return descriptions
    except Exception as e:
        log_to_console_and_file(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–ø–∏—Å–∞–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–∞: {e}")
        return []

def get_random_report_description(reason: str) -> str:
    descriptions = load_report_descriptions(reason)
    if descriptions:
        return random.choice(descriptions)
    else:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –ø—Ä–∏—á–∏–Ω—ã."

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å. –ú–µ–Ω—é –ø—Ä–∏–ª–æ–∂–µ–Ω–æ –Ω–∏–∂–µ", reply_markup=await get_main_keyboard())

@dp.message_handler(lambda message: message.text == "üö® –†–µ–ø–æ—Ä—Ç")
async def report(message: types.Message):
    await message.reply(
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /report <—Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ> <–ø—Ä–∏—á–∏–Ω–∞ (spam, violence, etc.)>\n\n"
        "–ü—Ä–∏–º–µ—Ä: /report https://t.me/DoxChat/123 spam",
        reply_markup=await get_main_keyboard()
    )

@dp.message_handler(lambda message: message.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def profile(message: types.Message):
    user_id = message.from_user.id
    if await check_subscription(user_id):
        async with aiosqlite.connect(DB_PATH) as db:
            cursor = await db.execute('SELECT expiration_date FROM subscriptions WHERE user_id = ?', (user_id,))
            row = await cursor.fetchone()
            expiration_date = datetime.fromisoformat(row[0])
            remaining_days = (expiration_date - datetime.utcnow()).days
            if remaining_days > 0:
                await message.reply(f"–í–∞—à ID: {user_id}\n–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏: {remaining_days} –¥–Ω–µ–π", reply_markup=await get_main_keyboard())
            else:
                await message.reply(f"–í–∞—à ID: {user_id}\n–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞.", reply_markup=await get_main_keyboard())
    else:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.", reply_markup=await get_main_keyboard())

@dp.message_handler(lambda message: message.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
async def information(message: types.Message):
    await message.reply(
        "–¶–µ–Ω—ã –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É:\n"
        "1 –¥–µ–Ω—å - 2$\n"
        "7 –¥–Ω–µ–π - 5$\n"
        "31 –¥–µ–Ω—å - 10$\n"
        "1 –≥–æ–¥ - 100$\n\n"
        "@watru\n\n"
        "@BotRepWork - –†–∞–±–æ—Ç—ã –±–æ—Ç–∞",
        reply_markup=await get_main_keyboard()
    )

@dp.message_handler(commands=['givesub'])
async def give_subscription(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–¥–∞—á–∏ –ø–æ–¥–ø–∏—Å–∫–∏.")
        return

    args = message.get_args().split()
    if len(args) != 2:
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /givesub <user_id> <days>")
        return

    try:
        user_id = int(args[0])
        days = int(args[1])
        await add_subscription(user_id, days)
        await message.reply(f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {days} –¥–Ω–µ–π –≤—ã–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.")
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è user_id –∏ days.")

@dp.message_handler(commands=['report'])
async def report_command(message: types.Message):
    user_id = message.from_user.id
    now = datetime.utcnow()

    if user_id in reporting_time:
        last_report_time = reporting_time[user_id]
        cooldown = timedelta(minutes=8)
        if now - last_report_time < cooldown:
            remaining_time = cooldown - (now - last_report_time)
            await message.reply(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ {remaining_time.seconds // 60} –º–∏–Ω—É—Ç –∏ {remaining_time.seconds % 60} —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –∂–∞–ª–æ–±—ã.")
            return

    if not await check_subscription(user_id):
        await message.reply("‚ùå")
        return

    args = message.get_args().split(maxsplit=1)
    if len(args) < 2:
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π: /report <—Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ> <–ø—Ä–∏—á–∏–Ω–∞ (spam, violence, etc.)>")
        return

    message_link = args[0]
    reason_str = args[1].lower()

    if reason_str not in reasons:
        await message.reply("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã: spam, violence, pornography, child_abuse, illegal_drugs, personal_details, other.")
        return

    if message_link.startswith("https://t.me/c/"):
        await message.reply("–°–Ω–æ—Å –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω. –ß–∞—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π")
        return

    reason = reasons[reason_str]
    desc = get_random_report_description(reason_str)  

    status_message = f"<b>üß® –ó–∞–ø—É—â–µ–Ω–∞ –∞—Ç–∞–∫–∞!</b>\n<b>–¢–∞—Ä–≥–µ—Ç:</b> <a href='{message_link}'>–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ</a>"
    proc_del = await bot.send_message(chat_id=user_id, text="‚öôÔ∏è")

    successful_reports = 0
    reporting[user_id] = True
    method_used = reason_str.capitalize()

    log_to_console_and_file("–ò—â–µ–º —Å–µ—Å—Å–∏–∏ –≤ –ø–∞–ø–∫–µ 'sessions/'...")

    session_files = os.listdir('sessions/')
    log_to_console_and_file(f"–ù–∞–π–¥–µ–Ω–æ —Å–µ—Å—Å–∏–π: {len(session_files)}")

    for account in session_files:
        if not account.endswith('.session'):
            continue

        log_to_console_and_file(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∂–∞–ª–æ–±—ã —Å –∞–∫–∫–∞—É–Ω—Ç–∞ {account}...")

        client = TelegramClient(f"sessions/{account}", API_ID, API_HASH, auto_reconnect=True)
        try:
            await client.connect()
            log_to_console_and_file(f"–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å —Å –∞–∫–∫–∞—É–Ω—Ç–∞ {account}")

            for _ in range(5):
                if not reporting.get(user_id, False):
                    await message.reply("–û—Ç–ø—Ä–∞–≤–∫–∞ –∂–∞–ª–æ–± –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
                    return

                try:
                    start_time = time.time()
                    await process_message_link(client, message_link.strip(), reason, desc)  # –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–±—ã
                    end_time = time.time()
                    log_to_console_and_file(f"–ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å –∞–∫–∫–∞—É–Ω—Ç–∞ {account}. –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: {end_time - start_time:.2f} —Å–µ–∫.")
                    successful_reports += 1

                except (AuthKeyUnregisteredError, AuthKeyDuplicatedError) as e:
                    log_to_console_and_file(f"–°–µ—Å—Å–∏—è –Ω–µ–≤–∞–ª–∏–¥–Ω–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å –¥—Ä—É–≥–æ–≥–æ IP-–∞–¥—Ä–µ—Å–∞: {e}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç.")
                    break

                except Exception as e:
                    log_to_console_and_file(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∞–∫–∫–∞—É–Ω—Ç–∞ {account}: {e}")

        except Exception as e:
            log_to_console_and_file(f'–û—à–∏–±–∫–∞ —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º {account}: {e}')
        finally:
            await client.disconnect()

    reporting_time[user_id] = datetime.utcnow()
    await proc_del.delete()

    response_message = f"""
    <b>–ñ–∞–ª–æ–±—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!</b>\n
    <b>–¢–∞—Ä–≥–µ—Ç:</b> <a href='{message_link}'>–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ</a>\n
    <b>–ú–µ—Ç–æ–¥:</b> <code>{method_used}</code>\n
    <b>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∂–∞–ª–æ–±:</b> <code>{successful_reports}</code>
    """
    await bot.send_message(chat_id=user_id, text="‚úÖ")
    await bot.send_message(chat_id=user_id, text=response_message, parse_mode='HTML')

    reporting[user_id] = False

if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.run_until_complete(init_db())
    executor.start_polling(dp, skip_updates=True)
